{"version":3,"sources":["../src/index.ts","../src/swap/quote.ts","../src/chains.ts","../src/swap/swap.ts","../src/token/permit2.ts","../src/token/approval.ts","../src/weth/wrap.ts","../src/weth/unwrap.ts","../src/explorer/search.ts","../src/explorer/contract.ts","../src/ens.ts","../src/token/info.ts","../src/token/balance.ts","../src/bridge/standard.ts","../src/bridge/poa.ts","../src/bridge/bridge.ts"],"sourcesContent":["import { quoteExactInput, swapExactInput } from \"./swap/index.js\";\nexport const swap = {\n  quoteExactInput,\n  swapExactInput,\n};\n\nimport { prepareWrapTx, prepareUnwrapTx } from \"./weth/index.js\";\nexport const weth = {\n  prepareWrapTx,\n  prepareUnwrapTx,\n};\n\nexport { search, getContractInfo } from \"./explorer/index.js\";\nexport { resolveEnsDomain, resolveLLDomain } from \"./ens.js\";\nexport {\n  fetchTokenInfo,\n  fetchTokenDecimals,\n  fetchTokenName,\n  fetchTokenSymbol,\n  fetchTokenTotalSupply,\n} from \"./token/info.js\";\nexport { fetchBalance } from \"./token/balance.js\";\nexport {\n  fetchAllowance,\n  prepareApprovalTx,\n  ensureAllowance,\n} from \"./token/approval.js\";\nexport {\n  fetchPermit2Allowance,\n  preparePermit2ApprovalTx,\n  ensurePermit2Allowance,\n} from \"./token/permit2.js\";\n\nexport {\n  prepareBridgeTransfer,\n  extractBridgeTransferID,\n} from \"./bridge/bridge.js\";\n","import {\n  decodeFunctionResult,\n  encodeFunctionData,\n  type Abi,\n  type Address,\n  type PublicClient,\n} from \"viem\";\nimport { getPublicClient, resolveChainRef, type ChainRef } from \"../chains.js\";\n\nconst QuoterABI: Abi = [\n  {\n    inputs: [\n      {\n        components: [\n          { internalType: \"address\", name: \"tokenIn\", type: \"address\" },\n          { internalType: \"address\", name: \"tokenOut\", type: \"address\" },\n          { internalType: \"uint256\", name: \"amountIn\", type: \"uint256\" },\n          { internalType: \"uint24\", name: \"fee\", type: \"uint24\" },\n          {\n            internalType: \"uint160\",\n            name: \"sqrtPriceLimitX96\",\n            type: \"uint160\",\n          },\n        ],\n        internalType: \"struct IQuoterV2.QuoteExactInputSingleParams\",\n        name: \"params\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"quoteExactInputSingle\",\n    outputs: [\n      { internalType: \"uint256\", name: \"amountOut\", type: \"uint256\" },\n      {\n        internalType: \"uint160\",\n        name: \"sqrtPriceX96After\",\n        type: \"uint160\",\n      },\n      {\n        internalType: \"uint32\",\n        name: \"initializedTicksCrossed\",\n        type: \"uint32\",\n      },\n      { internalType: \"uint256\", name: \"gasEstimate\", type: \"uint256\" },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n] as const;\n\nexport interface QuoteExactInputSingleParams {\n  fromToken: `0x${string}`;\n  toToken: `0x${string}`;\n  amountIn: bigint;\n  fee: number;\n}\n\nexport interface QuoteResult {\n  amountOut: bigint;\n  sqrtPriceX96After: bigint;\n  initializedTicksCrossed: bigint;\n  gasEstimate: bigint;\n}\n\nexport const quoteExactInput = async (\n  chainRef: ChainRef,\n  params: QuoteExactInputSingleParams\n): Promise<QuoteResult> => {\n  const chain = resolveChainRef(chainRef);\n  if (!chain) throw new Error(\"Unsupported chain\");\n  if (!chain.uniswapv3) throw new Error(\"Uniswap V3 not supported\");\n\n  const client = getPublicClient(chainRef);\n  const quoterContractAddress = chain.uniswapv3.quoter as `0x${string}`;\n  return _quoteExactInput(client, quoterContractAddress as Address, params);\n};\n\nconst _quoteExactInput = async (\n  client: PublicClient,\n  quoterContractAddress: `0x${string}`,\n  params: QuoteExactInputSingleParams\n) => {\n  const { fromToken, toToken, amountIn, fee } = params;\n  // Prepare the call\n  const encodedData = encodeFunctionData({\n    abi: QuoterABI,\n    functionName: \"quoteExactInputSingle\",\n    args: [\n      {\n        tokenIn: fromToken,\n        tokenOut: toToken,\n        amountIn: amountIn,\n        fee: fee,\n        sqrtPriceLimitX96: 0n, // no limit\n      },\n    ],\n  });\n\n  // Perform the static call\n  const response = await client.call({\n    to: quoterContractAddress,\n    data: encodedData,\n  });\n\n  // Decode the response\n  const result = decodeFunctionResult({\n    abi: QuoterABI,\n    functionName: \"quoteExactInputSingle\",\n    data: response.data!,\n  }) as [bigint, bigint, bigint, bigint];\n\n  // Extract the individual outputs\n  const quotedAmountOut = result[0];\n  const sqrtPriceX96After = result[1];\n  const initializedTicksCrossed = result[2];\n  const gasEstimate = result[3];\n\n  return {\n    amountOut: quotedAmountOut,\n    sqrtPriceX96After,\n    initializedTicksCrossed,\n    gasEstimate,\n  } as QuoteResult;\n};\n","import {\n  createPublicClient,\n  defineChain,\n  http,\n  type Address,\n  type Chain,\n} from \"viem\";\nimport {\n  lightlinkPegasus,\n  lightlinkPhoenix,\n  mainnet,\n  sepolia,\n} from \"viem/chains\";\n\nconst CONTRACTS = {\n  lightlink: {\n    UNIVERSAL_ROUTER: \"0x738fD6d10bCc05c230388B4027CAd37f82fe2AF2\",\n    UNISWAP_V3_FACTORY_ADDRESS: \"0xcb2436774C3e191c85056d248EF4260ce5f27A9D\",\n    UNISWAP_V3_QUOTER_ADDRESS: \"0x5911cB3633e764939edc2d92b7e1ad375Bb57649\",\n    STANDARD_BRIDGE: \"0x4200000000000000000000000000000000000010\",\n    L2_ERC20_PREDICATE: \"0x63105ee97BfB22Dfe23033b3b14A4F8FED121ee9\",\n  },\n\n  lightlinkTestnet: {\n    UNIVERSAL_ROUTER: \"0x742d315e929B188e3F05FbC49774474a627b0502\",\n    UNISWAP_V3_FACTORY_ADDRESS: \"0x7A5531FC6628e55f22ED2C6AD015B75948fC36F4\",\n    UNISWAP_V3_QUOTER_ADDRESS: \"0x97e7D916aa065eADA70B317677fb8a4A5504F51f\",\n    STANDARD_BRIDGE: \"0x4200000000000000000000000000000000000010\",\n    L2_ERC20_PREDICATE: \"0xeCBb6206B0bA437EA01080662608b7d445fc7ec\",\n  },\n\n  ethereum: {\n    LIGHTLINK_PORTAL: \"0x0000000000000000000000000000000000000000\",\n    STANDARD_BRIDGE: \"0xc7a7199bb5F0aA7B54eca90fC793Ec83E5683b0c\",\n    L1_ERC20_PREDICATE: \"0x63105ee97BfB22Dfe23033b3b14A4F8FED121ee9\",\n  },\n\n  ethereumSepolia: {\n    LIGHTLINK_PORTAL: \"0x0000000000000000000000000000000000000000\",\n    STANDARD_BRIDGE: \"0xc7206C8d1F5558a7C899A427bf26AfA377Ad0afA\",\n    L1_ERC20_PREDICATE: \"0x3343DE004FB02522b01FDD2Fd383AEFB9DF77fE7\",\n  },\n};\n\nexport interface NetworkDef {\n  id: number;\n  name: string;\n  rpcUrl: string;\n  explorerUrl: string;\n  isL2: boolean;\n  uniswapv3?: {\n    quoter: string;\n    router: string;\n    factory: string;\n  };\n  bridge?: {\n    standardBridge?: Address;\n    l1ERC20Predicate?: Address;\n    l2ERC20Predicate?: Address;\n  };\n  ens?: { resolver: string };\n  permit2: string;\n  weth: string;\n}\n\nexport const Phoenix: NetworkDef = {\n  id: 1890,\n  name: \"Lightlink Phoenix\",\n  rpcUrl:\n    process.env.LIGHTLINK_MAINNET_RPC_URL ||\n    \"https://replicator-01.phoenix.lightlink.io/rpc/v1\",\n  explorerUrl: \"https://phoenix.lightlink.io\",\n  isL2: true,\n  uniswapv3: {\n    quoter: CONTRACTS.lightlink.UNISWAP_V3_QUOTER_ADDRESS,\n    router: CONTRACTS.lightlink.UNIVERSAL_ROUTER,\n    factory: CONTRACTS.lightlink.UNISWAP_V3_FACTORY_ADDRESS,\n  },\n  bridge: {\n    standardBridge: CONTRACTS.lightlink.STANDARD_BRIDGE as Address,\n    l2ERC20Predicate: CONTRACTS.lightlink.L2_ERC20_PREDICATE as Address,\n  },\n  permit2: \"0xB952578f3520EE8Ea45b7914994dcf4702cEe578\",\n  weth: \"0x7EbeF2A4b1B09381Ec5B9dF8C5c6f2dBECA59c73\",\n};\n\nexport const Pegasus: NetworkDef = {\n  id: 1891,\n  name: \"Lightlink Pegasus\",\n  rpcUrl:\n    process.env.LIGHTLINK_TESTNET_RPC_URL ||\n    \"https://replicator-01.pegasus.lightlink.io/rpc/v1\",\n  explorerUrl: \"https://pegasus.lightlink.io\",\n  isL2: true,\n  uniswapv3: {\n    quoter: CONTRACTS.lightlinkTestnet.UNISWAP_V3_QUOTER_ADDRESS,\n    router: CONTRACTS.lightlinkTestnet.UNIVERSAL_ROUTER,\n    factory: CONTRACTS.lightlinkTestnet.UNISWAP_V3_FACTORY_ADDRESS,\n  },\n  bridge: {\n    standardBridge: CONTRACTS.lightlinkTestnet.STANDARD_BRIDGE as Address,\n    l2ERC20Predicate: CONTRACTS.lightlinkTestnet.L2_ERC20_PREDICATE as Address,\n  },\n  permit2: \"0x65b0dE86Df48d72aCdaF7E548b5C836663A0a4fa\",\n  weth: \"0xF42991f02C07AB66cFEa282E7E482382aEB85461\",\n};\n\nexport const Ethereum: NetworkDef = {\n  id: 1,\n  name: \"Ethereum\",\n  isL2: false,\n  rpcUrl:\n    process.env.ETHEREUM_MAINNET_RPC_URL ||\n    \"https://ethereum-rpc.publicnode.com\",\n  explorerUrl: \"https://etherscan.io\",\n  bridge: {\n    standardBridge: CONTRACTS.ethereum.STANDARD_BRIDGE as Address,\n    l1ERC20Predicate: CONTRACTS.ethereum.L1_ERC20_PREDICATE as Address,\n  },\n  permit2: \"0x000000000022D473030F116dDEE9F6B43aC78BA3\",\n  weth: \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\",\n};\n\nexport const Sepolia: NetworkDef = {\n  id: 11155111,\n  name: \"Ethereum Sepolia\",\n  isL2: false,\n  rpcUrl:\n    process.env.ETHEREUM_SEPOLIA_RPC_URL ||\n    \"https://ethereum-sepolia-rpc.publicnode.com\",\n  explorerUrl: \"https://sepolia.etherscan.io\",\n  bridge: {\n    standardBridge: CONTRACTS.ethereumSepolia.STANDARD_BRIDGE as Address,\n    l1ERC20Predicate: CONTRACTS.ethereumSepolia.L1_ERC20_PREDICATE as Address,\n  },\n  permit2: \"0x000000000022D473030F116dDEE9F6B43aC78BA3\",\n  weth: \"0x7b79995e5f793A07Bc00c21412e50Ecae098E7f9\",\n};\n\nexport const chains = [Phoenix, Pegasus, Ethereum, Sepolia];\n\nexport const getChainById = (id: number) => {\n  return chains.find((chain) => chain.id == id);\n};\n\n// export const getSupportedPublicClient = (id: number) => {\n//   if (id != Phoenix.id && id != Pegasus.id) {\n//     throw new Error(\"Unsupported chain\");\n//   }\n\n//   const chain = id == Phoenix.id ? lightlinkPhoenix : lightlinkPegasus;\n\n//   return createPublicClient({\n//     chain: chain,\n//     transport: http(),\n//   });\n// };\n\nexport const getPublicClient = (chainRef: ChainRef) => {\n  const chain = resolveChainRef(chainRef);\n  if (!chain) throw new Error(\"Unsupported chain\");\n\n  let viemChain: Chain;\n  switch (chain.id) {\n    // case Phoenix.id:\n    //   viemChain = lightlinkPhoenix;\n    //   break;\n    // case Pegasus.id:\n    //   viemChain = lightlinkPegasus;\n    //   break;\n    // case Ethereum.id:\n    //   viemChain = mainnet;\n    //   break;\n    // case Sepolia.id:\n    //   viemChain = sepolia;\n    //   break;\n    default:\n      viemChain = {\n        id: chain.id,\n        name: chain.name,\n        nativeCurrency: mainnet.nativeCurrency,\n        rpcUrls: { default: { http: [chain.rpcUrl] } },\n        blockExplorers: {\n          default: { name: \"explorer\", url: chain.explorerUrl },\n        },\n        testnet: false,\n      };\n  }\n\n  return createPublicClient({\n    chain: viemChain,\n    transport: http(),\n  });\n};\n\nexport type ChainRef = number | NetworkDef;\n\nexport const resolveChainRef = (ref: ChainRef) => {\n  if (typeof ref === \"number\") {\n    return getChainById(ref);\n  }\n\n  return ref;\n};\n","import {\n  encodeAbiParameters,\n  encodeFunctionData,\n  encodePacked,\n  type Abi,\n} from \"viem\";\nimport { Pegasus, Phoenix, resolveChainRef, type ChainRef } from \"../chains.js\";\nimport { ensurePermit2Allowance } from \"../token/permit2.js\";\nimport type { PreparedTx } from \"../common.js\";\n\nexport interface SwapExactInputParams {\n  tokenIn: `0x${string}`;\n  tokenOut: `0x${string}`;\n  amountIn: bigint;\n  amountOut: bigint;\n  fee: number;\n  slippage: number;\n}\n\nexport interface SwapExactInputResult {\n  txHash: `0x${string}`;\n  minAmountOut: bigint;\n}\n\nconst SWAP_EXACT_IN = \"0x00\";\n\nconst UniversalRouterABI: Abi = [\n  {\n    inputs: [\n      { internalType: \"bytes\", name: \"commands\", type: \"bytes\" },\n      { internalType: \"bytes[]\", name: \"inputs\", type: \"bytes[]\" },\n    ],\n    name: \"execute\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n] as const;\n\nexport const prepareSwapExactInput = async (\n  chainRef: ChainRef,\n  sender: `0x${string}`,\n  params: SwapExactInputParams\n) => {\n  if (params.slippage < 0 || params.slippage > 1)\n    throw new Error(\"Slippage must be between 0 and 1\");\n\n  const txs: PreparedTx[] = [];\n\n  const chain = resolveChainRef(chainRef);\n  if (!chain) throw new Error(\"Unsupported chain\");\n  if (!chain.uniswapv3) throw new Error(\"Uniswap V3 not supported\");\n\n  const universalRouterAddress = chain.uniswapv3.router as `0x${string}`;\n\n  // Step 1. Ensure Permit2 is approved\n  txs.push(\n    ...(await ensurePermit2Allowance(\n      chain.id,\n      params.tokenIn,\n      sender,\n      universalRouterAddress,\n      params.amountIn + BigInt(1)\n    ))\n  );\n\n  // Step 2. Calculate minimum amount out\n  const slippageBP = BigInt(Math.floor(params.slippage * 10000));\n  const minAmountOut =\n    params.amountOut - (params.amountOut * slippageBP) / 10000n;\n\n  // Step 3. encode the swap route\n  const route = encodePacked(\n    [\"address\", \"uint24\", \"address\"],\n    [params.tokenIn, params.fee, params.tokenOut]\n  );\n\n  // step 4. encode the inputs for V3_SWAP_EXACT_IN\n  const inputs = encodeAbiParameters(\n    [\n      { type: \"address\" },\n      { type: \"uint256\" },\n      { type: \"uint256\" },\n      { type: \"bytes\" },\n      { type: \"bool\" },\n    ],\n    [sender, params.amountIn, minAmountOut, route, true]\n  );\n\n  const data = encodeFunctionData({\n    functionName: \"execute\",\n    abi: UniversalRouterABI,\n    args: [SWAP_EXACT_IN, [inputs]],\n  });\n\n  // step 5. execute the swap\n  txs.push({\n    to: universalRouterAddress,\n    data,\n    description: \"Executing swap via Universal Router\",\n  });\n\n  return txs;\n};\n","import { encodeFunctionData, type Abi } from \"viem\";\nimport type { PreparedTx } from \"../common.js\";\nimport {\n  getPublicClient,\n  Pegasus,\n  Phoenix,\n  resolveChainRef,\n  type ChainRef,\n} from \"../chains.js\";\nimport { ensureAllowance } from \"./approval.js\";\n\nconst Permit2ABI: Abi = [\n  {\n    name: \"allowance\",\n    type: \"function\",\n    inputs: [\n      { type: \"address\", name: \"owner\" },\n      { type: \"address\", name: \"token\" },\n      { type: \"address\", name: \"spender\" },\n    ],\n    outputs: [{ type: \"uint256\", name: \"allowance\" }],\n    stateMutability: \"view\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"token\", type: \"address\" },\n      { internalType: \"address\", name: \"spender\", type: \"address\" },\n      { internalType: \"uint160\", name: \"amount\", type: \"uint160\" },\n      { internalType: \"uint48\", name: \"expiration\", type: \"uint48\" },\n    ],\n    name: \"approve\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n] as const;\n\nexport function preparePermit2ApprovalTx(\n  chainRef: ChainRef,\n  token: `0x${string}`,\n  target: `0x${string}`,\n  amount: bigint,\n  deadline: number\n): PreparedTx {\n  const chain = resolveChainRef(chainRef);\n  if (!chain) throw new Error(\"Unsupported chain\");\n  if (!chain.permit2) throw new Error(\"Permit2 not supported\");\n\n  const permit2 = chain.permit2 as `0x${string}`;\n\n  return {\n    to: permit2,\n    data: encodeFunctionData({\n      abi: Permit2ABI,\n      functionName: \"approve\",\n      args: [token, target, amount, deadline],\n    }),\n    description: \"Using Permit2 to approve the target to spend the token\",\n  };\n}\n\nexport async function fetchPermit2Allowance(\n  chainRef: ChainRef,\n  owner: `0x${string}`,\n  token: `0x${string}`,\n  spender: `0x${string}`\n) {\n  const publicClient = getPublicClient(chainRef);\n\n  const chain = resolveChainRef(chainRef);\n  if (!chain) throw new Error(\"Unsupported chain\");\n\n  const permit2 = chain.permit2 as `0x${string}`;\n\n  return (await publicClient.readContract({\n    address: permit2,\n    abi: Permit2ABI,\n    functionName: \"allowance\",\n    args: [owner, token, spender],\n  })) as bigint;\n}\n\nconst ONE_DAY_IN_SECONDS = 86400;\n\nexport async function ensurePermit2Allowance(\n  chainRef: ChainRef,\n  token: `0x${string}`,\n  owner: `0x${string}`,\n  spender: `0x${string}`,\n  amount: bigint\n) {\n  const txs: PreparedTx[] = [];\n\n  const chain = resolveChainRef(chainRef);\n  if (!chain) throw new Error(\"Unsupported chain\");\n  if (!chain.permit2) throw new Error(\"Permit2 not supported\");\n\n  const permit2 = chain.permit2 as `0x${string}`;\n\n  // Step 1. Ensure Permit2 has\n  txs.push(...(await ensureAllowance(chainRef, token, owner, permit2, amount)));\n\n  // Step 2. Check if target is approved on Permit2\n  const allowance = await fetchPermit2Allowance(\n    chainRef,\n    owner,\n    token,\n    spender\n  );\n  if (allowance >= amount) {\n    return txs;\n  }\n\n  // Step 3. Approve Permit2 on target\n  const deadline = Math.floor(Date.now() / 1000) + ONE_DAY_IN_SECONDS;\n  txs.push(\n    preparePermit2ApprovalTx(chainRef, token, spender, amount, deadline)\n  );\n\n  return txs;\n}\n","import { encodeFunctionData, type Abi } from \"viem\";\nimport type { PreparedTx } from \"../common.js\";\nimport { getPublicClient, type ChainRef } from \"../chains.js\";\n\nconst TokenABI: Abi = [\n  {\n    name: \"approve\",\n    type: \"function\",\n    inputs: [\n      { type: \"address\", name: \"spender\" },\n      { type: \"uint256\", name: \"amount\" },\n    ],\n    outputs: [{ type: \"bool\", name: \"success\" }],\n    stateMutability: \"nonpayable\",\n  },\n  {\n    name: \"allowance\",\n    type: \"function\",\n    inputs: [\n      { type: \"address\", name: \"owner\" },\n      { type: \"address\", name: \"spender\" },\n    ],\n    outputs: [{ type: \"uint256\", name: \"allowance\" }],\n    stateMutability: \"view\",\n  },\n] as const;\n\nexport function prepareApprovalTx(\n  token: `0x${string}`,\n  target: `0x${string}`,\n  amount: bigint\n): PreparedTx {\n  return {\n    to: token,\n    data: encodeFunctionData({\n      abi: TokenABI,\n      functionName: \"approve\",\n      args: [target, amount],\n    }),\n    description: \"Approving token to be spent by target\",\n  };\n}\n\nexport async function fetchAllowance(\n  chainRef: ChainRef,\n  token: `0x${string}`,\n  owner: `0x${string}`,\n  spender: `0x${string}`\n) {\n  const publicClient = getPublicClient(chainRef);\n\n  return (await publicClient.readContract({\n    address: token,\n    abi: TokenABI,\n    functionName: \"allowance\",\n    args: [owner, spender],\n  })) as bigint;\n}\n\nexport async function ensureAllowance(\n  chainRef: ChainRef,\n  token: `0x${string}`,\n  owner: `0x${string}`,\n  spender: `0x${string}`,\n  amount: bigint\n) {\n  const txs: PreparedTx[] = [];\n\n  const allowance = await fetchAllowance(chainRef, token, owner, spender);\n  if (allowance < amount) {\n    txs.push(prepareApprovalTx(token, spender, amount));\n  }\n\n  return txs;\n}\n","import type { Abi } from \"viem\";\nimport { Pegasus, Phoenix, resolveChainRef, type ChainRef } from \"../chains.js\";\nimport type { PreparedTx } from \"../common.js\";\n\nconst WethABI: Abi = [\n  // function deposit() public payable\n  {\n    name: \"deposit\",\n    inputs: [],\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n] as const;\n\nexport const prepareWrapTx = (\n  chainRef: ChainRef,\n  amount: bigint\n): PreparedTx => {\n  const chain = resolveChainRef(chainRef);\n  if (!chain) throw new Error(\"Unsupported chain\");\n  if (!chain.weth) throw new Error(\"WETH not supported\");\n\n  const wethAddress = chain.weth as `0x${string}`;\n\n  return {\n    to: wethAddress,\n    data: \"0x\",\n    value: amount,\n    description: \"Wrapping ETH\",\n  };\n};\n","import { encodeFunctionData, type Abi } from \"viem\";\nimport { resolveChainRef, type ChainRef } from \"../chains.js\";\nimport type { PreparedTx } from \"../common.js\";\n\nconst WETH_ABI: Abi = [\n  // function withdraw(uint wad) public\n  {\n    name: \"withdraw\",\n    inputs: [{ name: \"wad\", type: \"uint256\" }],\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n] as const;\n\nexport const prepareUnwrapTx = (\n  chainRef: ChainRef,\n  amount: bigint\n): PreparedTx => {\n  const chain = resolveChainRef(chainRef);\n  if (!chain) throw new Error(\"Unsupported chain\");\n  if (!chain.weth) throw new Error(\"WETH not supported\");\n\n  const wethAddress = chain.weth as `0x${string}`;\n\n  return {\n    to: wethAddress,\n    data: encodeFunctionData({\n      abi: WETH_ABI,\n      functionName: \"withdraw\",\n      args: [amount],\n    }),\n    description: \"Unwrapping WETH\",\n  };\n};\n","import { lightlinkPegasus, lightlinkPhoenix } from \"viem/chains\";\nimport { resolveChainRef, type ChainRef } from \"../chains.js\";\n\nexport interface EnsProtocol {\n  deployment_blockscout_base_url: string;\n  description: string;\n  docs_url: string;\n  icon_url: string;\n  id: string;\n  short_name: string;\n  title: string;\n  tld_list: string[];\n}\n\nexport interface EnsInfo {\n  name: string;\n  protocol: EnsProtocol;\n  address_hash: string;\n  expiry_date: string;\n  names_count: number;\n}\n\nexport interface BaseItem {\n  address: string;\n  certified: boolean;\n  is_smart_contract_verified: boolean;\n  name: string | null;\n  priority: number;\n  type: string;\n  url: string;\n}\n\nexport interface EnsDomainItem extends BaseItem {\n  type: \"ens_domain\";\n  ens_info: EnsInfo;\n}\n\nexport interface ContractItem extends BaseItem {\n  type: \"contract\";\n  ens_info: null;\n}\n\nexport interface AddressItem extends BaseItem {\n  type: \"address\";\n  ens_info: null;\n}\n\nexport interface TokenItem extends BaseItem {\n  type: \"token\";\n  address_url: string;\n  circulating_market_cap: number | null;\n  exchange_rate: number | null;\n  icon_url: string;\n  is_verified_via_admin_panel: boolean;\n  symbol: string;\n  token_type: string;\n  token_url: string;\n  total_supply: string;\n}\n\nexport type SearchItem = EnsDomainItem | ContractItem | AddressItem | TokenItem;\n\nexport const search = async (\n  chainRef: ChainRef,\n  query: string\n): Promise<SearchItem[]> => {\n  const chain = resolveChainRef(chainRef);\n  if (!chain) throw new Error(\"Unsupported chain\");\n\n  const explorer = chain.explorerUrl;\n  const apiUrl = explorer + \"/api/v2/\";\n\n  const response = await fetch(apiUrl + \"search?q=\" + query);\n  const data = (await response.json()) as any;\n\n  return data.items as SearchItem[];\n};\n","import type { Abi } from \"viem\";\nimport { lightlinkPegasus, lightlinkPhoenix } from \"viem/chains\";\nimport { resolveChainRef, type ChainRef } from \"../chains.js\";\n\nexport interface BaseContract {\n  is_verified?: boolean;\n  creation_bytecode: string;\n  deployed_bytecode: string;\n  has_custom_methods_read: boolean;\n  has_custom_methods_write: boolean;\n  implementations: any[];\n  is_self_destructed: boolean;\n  proxy_type: string;\n}\n\nexport interface UnverifiedContract extends BaseContract {\n  is_verified: undefined;\n}\n\nexport interface AdditionalSource {\n  file_path: string;\n  source_code: string;\n}\n\nexport interface VerifiedContract extends BaseContract {\n  is_verified: true;\n  name: string;\n  is_blueprint: boolean;\n  license_type: string;\n  is_fully_verified: boolean;\n  is_vyper_contract: boolean;\n  is_verified_via_eth_bytecode_db: boolean;\n  language: string;\n  evm_version: string;\n  file_path: string;\n  source_code: string;\n  optimization_enabled: boolean;\n  verified_twin_address_hash: string;\n  compiler_settings: {\n    libraries: any;\n    optimizer: {\n      enabled: boolean;\n      runs: number;\n    };\n    outputSelection: {\n      [key: string]: string[];\n    };\n  };\n  optimization_runs: number;\n  sourcify_repo_url: string;\n  decoded_constructor_args: any[];\n  compiler_version: string;\n  is_verified_via_verifier_alliance: boolean;\n  verified_at: string;\n  external_libraries: any[];\n  additional_sources: AdditionalSource[];\n  abi: Abi;\n  is_changed_bytecode: boolean;\n  is_partially_verified: boolean;\n  constructor_args: string;\n}\n\nexport type Contract = UnverifiedContract | VerifiedContract;\n\nexport const getContractInfo = async (chainRef: ChainRef, address: string) => {\n  const chain = resolveChainRef(chainRef);\n  if (!chain) throw new Error(\"Unsupported chain\");\n\n  const explorer = chain.explorerUrl;\n  const apiUrl = explorer + \"/api/v2/\";\n\n  const response = await fetch(apiUrl + \"smart-contracts/\" + address);\n  const data = (await response.json()) as Contract;\n\n  return data;\n};\n\nexport const getContractAbi = async (chainRef: ChainRef, address: string) => {\n  const contract = await getContractInfo(chainRef, address);\n  if (!contract.is_verified) {\n    throw new Error(\"Contract is not verified\");\n  }\n\n  return contract.abi;\n};\n","import { createWeb3Name } from \"@web3-name-sdk/core\";\nimport { tldNamehash } from \"@web3-name-sdk/core/utils\";\nimport { createPublicClient, http, type Abi, type Address } from \"viem\";\nimport { lightlinkPhoenix } from \"viem/chains\";\nimport { normalize } from \"viem/ens\";\n\n// \"function resolver(bytes32 node) external view returns (address)\",\nconst ENSRegistryABI: Abi = [\n  {\n    name: \"resolver\",\n    type: \"function\",\n    inputs: [{ type: \"bytes32\", name: \"node\" }],\n    outputs: [{ type: \"address\", name: \"resolver\" }],\n    stateMutability: \"view\",\n  },\n] as const;\n\n// \"function addr(bytes32 node) external view returns (address)\",\nconst ENSResolverABI: Abi = [\n  {\n    name: \"addr\",\n    type: \"function\",\n    inputs: [{ type: \"bytes32\", name: \"node\" }],\n    outputs: [{ type: \"address\", name: \"addr\" }],\n    stateMutability: \"view\",\n  },\n] as const;\n\nexport const resolveEnsDomain = async (name: string) => {\n  // extract the tld and normalize the domain\n  const tld = name.split(\".\").pop();\n  const normalizedDomain = normalize(name);\n\n  // if its a .ll domain, use the custom resolver\n  if (tld === \"ll\") {\n    return resolveLLDomain(normalizedDomain);\n  }\n\n  // otherwise just use web3-name-sdk to get the address\n  const web3Name = createWeb3Name();\n  const address = await web3Name.getAddress(name);\n  return address as Address;\n};\n\nconst LL_IDENTIFIER =\n  50980310089186268088337308227696701776159000940410532847939554039755637n;\nconst LL_REGISTRY_ADDRESS =\n  \"0x5dC881dDA4e4a8d312be3544AD13118D1a04Cb17\" as Address;\n\nexport const resolveLLDomain = async (normalizedDomain: string) => {\n  const nameHash = tldNamehash(normalizedDomain, LL_IDENTIFIER);\n\n  const publicClient = createPublicClient({\n    transport: http(),\n    chain: lightlinkPhoenix,\n  });\n\n  // step 1. get the resolver\n  const resolver = (await publicClient.readContract({\n    address: LL_REGISTRY_ADDRESS,\n    abi: ENSRegistryABI,\n    functionName: \"resolver\",\n    args: [nameHash],\n  })) as Address;\n\n  // step 2. get the address\n  const address = await publicClient.readContract({\n    address: resolver,\n    abi: ENSResolverABI,\n    functionName: \"addr\",\n    args: [nameHash],\n  });\n\n  return address as Address;\n};\n","import type { Abi, Address } from \"viem\";\nimport { getPublicClient, type ChainRef } from \"../chains.js\";\n\nconst TokenABI: Abi = [\n  {\n    name: \"name\",\n    type: \"function\",\n    stateMutability: \"view\",\n    inputs: [],\n    outputs: [{ type: \"string\" }],\n  },\n  {\n    name: \"symbol\",\n    type: \"function\",\n    stateMutability: \"view\",\n    inputs: [],\n    outputs: [{ type: \"string\" }],\n  },\n  {\n    name: \"decimals\",\n    type: \"function\",\n    stateMutability: \"view\",\n    inputs: [],\n    outputs: [{ type: \"uint8\" }],\n  },\n  {\n    name: \"totalSupply\",\n    type: \"function\",\n    stateMutability: \"view\",\n    inputs: [],\n    outputs: [{ type: \"uint256\" }],\n  },\n];\n\nexport interface TokenInfo {\n  name: string;\n  symbol: string;\n  decimals: number;\n  totalSupply: bigint;\n}\n\nexport const fetchTokenName = async (chainRef: ChainRef, address: Address) => {\n  const publicClient = getPublicClient(chainRef);\n\n  const name = await publicClient.readContract({\n    address,\n    abi: TokenABI,\n    functionName: \"name\",\n  });\n\n  return name as string;\n};\n\nexport const fetchTokenSymbol = async (\n  chainRef: ChainRef,\n  address: Address\n) => {\n  const publicClient = getPublicClient(chainRef);\n\n  return (await publicClient.readContract({\n    address,\n    abi: TokenABI,\n    functionName: \"symbol\",\n  })) as string;\n};\n\nexport const fetchTokenDecimals = async (\n  chainRef: ChainRef,\n  address: Address\n) => {\n  const publicClient = getPublicClient(chainRef);\n\n  return (await publicClient.readContract({\n    address,\n    abi: TokenABI,\n    functionName: \"decimals\",\n  })) as number;\n};\n\nexport const fetchTokenTotalSupply = async (\n  chainRef: ChainRef,\n  address: Address\n) => {\n  const publicClient = getPublicClient(chainRef);\n\n  return (await publicClient.readContract({\n    address,\n    abi: TokenABI,\n    functionName: \"totalSupply\",\n  })) as bigint;\n};\n\nexport const fetchTokenInfo = async (chainRef: ChainRef, address: Address) => {\n  const [name, symbol, decimals, totalSupply] = await Promise.all([\n    fetchTokenName(chainRef, address),\n    fetchTokenSymbol(chainRef, address),\n    fetchTokenDecimals(chainRef, address),\n    fetchTokenTotalSupply(chainRef, address),\n  ]);\n\n  return { name, symbol, decimals, totalSupply };\n};\n","import type { Abi, Address } from \"viem\";\nimport { getPublicClient, type ChainRef } from \"../chains.js\";\n\nconst TokenABI: Abi = [\n  {\n    name: \"balanceOf\",\n    inputs: [{ name: \"account\", type: \"address\" }],\n    outputs: [{ name: \"balance\", type: \"uint256\" }],\n    type: \"function\",\n    stateMutability: \"view\",\n  },\n] as const;\n\nexport const fetchBalance = async (\n  chainRef: ChainRef,\n  token: Address,\n  account: Address\n) => {\n  const publicClient = getPublicClient(chainRef);\n\n  return (await publicClient.readContract({\n    address: token,\n    abi: TokenABI,\n    functionName: \"balanceOf\",\n    args: [account],\n  })) as bigint;\n};\n","import {\n  encodeFunctionData,\n  type Hex,\n  keccak256,\n  encodeAbiParameters,\n  parseEventLogs,\n  type TransactionReceipt,\n} from \"viem\";\nimport type { PreparedTx } from \"../common.js\";\nimport { getPublicClient, resolveChainRef, type ChainRef } from \"../chains.js\";\nimport type { BridgeParams } from \"./bridge.js\";\n\n// const StandardBridgeABI = [\n//   {\n//     inputs: [\n//       {\n//         internalType: \"uint32\",\n//         name: \"_minGasLimit\",\n//         type: \"uint32\",\n//       },\n//       {\n//         internalType: \"bytes\",\n//         name: \"_extraData\",\n//         type: \"bytes\",\n//       },\n//     ],\n//     name: \"bridgeETH\",\n//     outputs: [],\n//     stateMutability: \"payable\",\n//     type: \"function\",\n//   },\n// ] as const;\n\ntype StandardBridgeDepositParams = BridgeParams;\n\nexport const prepareStandardBridgeETHDeposit = (\n  chainRef: ChainRef,\n  params: StandardBridgeDepositParams\n) => {\n  const txs: PreparedTx[] = [];\n\n  const chain = resolveChainRef(chainRef);\n  if (!chain) throw new Error(\"Unsupported chain\");\n\n  const standardBridgeAddress =\n    params.bridgeAddress ?? chain.bridge?.standardBridge;\n  if (!standardBridgeAddress) throw new Error(\"Standard bridge not found\");\n\n  txs.push({\n    to: standardBridgeAddress,\n    data: \"0x\",\n    value: params.amount,\n    description: \"Bridge ETH using the standard bridge\",\n  });\n\n  return txs;\n};\n\nconst CrossDomainMessengerABI = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"target\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes\",\n        name: \"message\",\n        type: \"bytes\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"messageNonce\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"gasLimit\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"SentMessage\",\n    type: \"event\",\n  },\n] as const;\n\nexport const hasStandardBridgeLogs = (receipt: TransactionReceipt) => {\n  const logs = parseEventLogs({\n    abi: CrossDomainMessengerABI,\n    eventName: \"SentMessage\",\n    logs: receipt.logs,\n  });\n\n  return logs.length > 0;\n};\n\nexport const extractStandardBridgeTransferID = async (\n  chainRef: ChainRef,\n  txHash: Hex\n) => {\n  const chain = resolveChainRef(chainRef);\n  if (!chain) throw new Error(`Chain ${chainRef} not found`);\n\n  // Create a public client to fetch transaction data\n  const client = getPublicClient(chainRef);\n\n  // Get the transaction receipt\n  const receipt = await client.getTransactionReceipt({ hash: txHash });\n\n  // Parse the SentMessage event from the logs\n  const logs = parseEventLogs({\n    abi: CrossDomainMessengerABI,\n    eventName: \"SentMessage\",\n    logs: receipt.logs,\n  });\n\n  if (logs.length === 0) {\n    throw new Error(\"SentMessage event not found in transaction\");\n  }\n\n  const sentMessageEvent = logs[0]!;\n  const { target, sender, message, messageNonce, gasLimit } =\n    sentMessageEvent.args;\n\n  // Encode the cross domain message (equivalent to encodeCrossDomainMessageV1)\n  const encodedMessage = encodeAbiParameters(\n    [\n      { type: \"bytes4\" }, // function selector\n      { type: \"uint256\" }, // nonce\n      { type: \"address\" }, // sender\n      { type: \"address\" }, // target\n      { type: \"uint256\" }, // value (0 for ETH bridges)\n      { type: \"uint256\" }, // gasLimit\n      { type: \"bytes\" }, // data\n    ],\n    [\n      \"0xd764ad0b\", // relayMessage function selector\n      messageNonce,\n      sender,\n      target,\n      0n, // value is 0 for standard ETH bridge\n      gasLimit,\n      message,\n    ]\n  );\n\n  return keccak256(encodedMessage);\n};\n","import {\n  decodeEventLog,\n  encodeFunctionData,\n  parseEventLogs,\n  keccak256,\n  encodePacked,\n  type Address,\n  type Hex,\n  type TransactionReceipt,\n} from \"viem\";\nimport { getPublicClient, resolveChainRef, type ChainRef } from \"../chains.js\";\nimport { ensureAllowance } from \"../token/approval.js\";\nimport type { PreparedTx } from \"../common.js\";\nimport type { BridgeParams } from \"./bridge.js\";\n\nconst L1ERC20PredicateABI = [\n  {\n    name: \"deposit\",\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_l1Token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_amount\",\n        type: \"uint256\",\n      },\n    ],\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  //   event DepositToken(bytes message);\n  {\n    name: \"DepositToken\",\n    inputs: [\n      {\n        internalType: \"bytes\",\n        name: \"message\",\n        type: \"bytes\",\n      },\n    ],\n    outputs: [],\n    type: \"event\",\n  },\n] as const;\n\n//  'function withdraw(address _l2Token, uint256 _amount) external',\nconst L2ERC20PredicateABI = [\n  {\n    name: \"withdraw\",\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_l2Token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_amount\",\n        type: \"uint256\",\n      },\n    ],\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  //   event WithdrawToken(bytes message);\n  {\n    name: \"WithdrawToken\",\n    inputs: [\n      {\n        internalType: \"bytes\",\n        name: \"message\",\n        type: \"bytes\",\n      },\n    ],\n    outputs: [],\n    type: \"event\",\n  },\n] as const;\n\ntype PoaBridgeParams = BridgeParams;\n\nexport const preparePoaBridgeToL2 = async (\n  chainRef: ChainRef,\n  sender: Address,\n  params: PoaBridgeParams\n): Promise<PreparedTx[]> => {\n  const { amount, token } = params;\n  if (token === \"eth\") throw new Error(\"ETH is not supported for POA bridge\");\n  if (!token) throw new Error(\"Token is required\");\n\n  const chain = resolveChainRef(chainRef);\n  if (!chain) throw new Error(`Chain ${chainRef} not found`);\n\n  // ensure contract address is defined\n  const l1ERC20Predicate =\n    params.bridgeAddress ?? chain.bridge?.l1ERC20Predicate;\n  if (!l1ERC20Predicate) throw new Error(`L1 ERC20 Predicate not found`);\n\n  // 1. Ensure allowance is set\n  const allowanceTxs = await ensureAllowance(\n    chainRef,\n    token,\n    l1ERC20Predicate,\n    sender,\n    amount\n  );\n\n  // 2. Deposit to L2\n  const depositeData = encodeFunctionData({\n    abi: L1ERC20PredicateABI,\n    functionName: \"deposit\",\n    args: [token, amount],\n  });\n\n  return [\n    ...allowanceTxs,\n    {\n      to: l1ERC20Predicate,\n      data: depositeData,\n      value: amount,\n      description: \"Bridge to L2 using POA bridge\",\n    },\n  ];\n};\n\nexport const preparePoaBridgeToL1 = async (\n  chainRef: ChainRef,\n  sender: Address,\n  params: PoaBridgeParams\n): Promise<PreparedTx[]> => {\n  const { amount, token } = params;\n  if (token === \"eth\") throw new Error(\"ETH is not supported for POA bridge\");\n  if (!token) throw new Error(\"Token is required\");\n  const chain = resolveChainRef(chainRef);\n  if (!chain) throw new Error(`Chain ${chainRef} not found`);\n\n  // ensure contract address is defined\n  const l2ERC20Predicate =\n    params.bridgeAddress ?? chain.bridge?.l2ERC20Predicate;\n  if (!l2ERC20Predicate) throw new Error(`L2 ERC20 Predicate not found`);\n\n  // 1. Ensure allowance is set\n  const allowanceTxs = await ensureAllowance(\n    chainRef,\n    token,\n    l2ERC20Predicate,\n    sender,\n    amount\n  );\n\n  // 2. Withdraw from L2\n  const withdrawData = encodeFunctionData({\n    abi: L2ERC20PredicateABI,\n    functionName: \"withdraw\",\n    args: [token, amount],\n  });\n\n  return [\n    ...allowanceTxs,\n    {\n      to: l2ERC20Predicate,\n      data: withdrawData,\n      description: \"Bridge to L1 using POA bridge\",\n    },\n  ];\n};\n\nexport const preparePoaBridgeDeposit = async (\n  chainRef: ChainRef,\n  sender: Address,\n  params: PoaBridgeParams\n): Promise<PreparedTx[]> => {\n  const chain = resolveChainRef(chainRef);\n  if (!chain) throw new Error(`Chain ${chainRef} not found`);\n\n  if (chain.isL2) return preparePoaBridgeToL2(chainRef, sender, params);\n  return preparePoaBridgeToL1(chainRef, sender, params);\n};\n\nexport const hasPoaBridgeLogs = (receipt: TransactionReceipt) => {\n  const l1Logs = parseEventLogs({\n    abi: L1ERC20PredicateABI,\n    logs: receipt.logs,\n  });\n  if (l1Logs.length > 0) return true;\n\n  const l2Logs = parseEventLogs({\n    abi: L2ERC20PredicateABI,\n    logs: receipt.logs,\n  });\n  return l2Logs.length > 0;\n};\n\nexport const extractPoaBridgeToL2TransferID = async (\n  chainRef: ChainRef,\n  txHash: Hex\n) => {\n  const chain = resolveChainRef(chainRef);\n  if (!chain) throw new Error(`Chain ${chainRef} not found`);\n\n  const publicClient = getPublicClient(chainRef);\n  const receipt = await publicClient.getTransactionReceipt({ hash: txHash });\n  if (!receipt) throw new Error(`Transaction ${txHash} not found`);\n\n  // Parse logs to find DepositToken event\n  const logs = parseEventLogs({\n    abi: L1ERC20PredicateABI,\n    logs: receipt.logs,\n  });\n\n  // Find the DepositToken event\n  const depositEvent = logs.find((log) => log.eventName === \"DepositToken\");\n  if (!depositEvent)\n    throw new Error(\"DepositToken event not found in transaction logs\");\n\n  // Extract the message from the event\n  const message = depositEvent.args.message as Hex;\n\n  // Get chain ID\n  const chainId = BigInt(chain.id);\n\n  // Calculate keccak256(abi.encodePacked(chainId, message))\n  const packed = encodePacked([\"uint256\", \"bytes\"], [chainId, message]);\n\n  return keccak256(packed);\n};\n\nexport const extractPoaBridgeToL1TransferID = async (\n  chainRef: ChainRef,\n  txHash: Hex\n) => {\n  const chain = resolveChainRef(chainRef);\n  if (!chain) throw new Error(`Chain ${chainRef} not found`);\n\n  const publicClient = getPublicClient(chainRef);\n  const receipt = await publicClient.getTransactionReceipt({ hash: txHash });\n  if (!receipt) throw new Error(`Transaction ${txHash} not found`);\n\n  // Parse logs to find WithdrawToken event\n  const logs = parseEventLogs({\n    abi: L2ERC20PredicateABI,\n    logs: receipt.logs,\n  });\n\n  const withdrawEvent = logs.find((log) => log.eventName === \"WithdrawToken\");\n  if (!withdrawEvent)\n    throw new Error(\"WithdrawToken event not found in transaction logs\");\n\n  const message = withdrawEvent.args.message as Hex;\n  const chainId = BigInt(chain.id);\n  const packed = encodePacked([\"uint256\", \"bytes\"], [chainId, message]);\n\n  return keccak256(packed);\n};\n","import {\n  extractStandardBridgeTransferID,\n  hasStandardBridgeLogs,\n  prepareStandardBridgeETHDeposit,\n} from \"./standard.js\";\nimport type { Address, Hex } from \"viem\";\nimport { getPublicClient, resolveChainRef, type ChainRef } from \"../chains.js\";\nimport {\n  extractPoaBridgeToL1TransferID,\n  extractPoaBridgeToL2TransferID,\n  hasPoaBridgeLogs,\n  preparePoaBridgeDeposit,\n} from \"./poa.js\";\n\nexport interface BridgeParams {\n  amount: bigint;\n  token?: \"eth\" | Address; // ETH or ERC20 Token address\n  bridgeAddress?: Address;\n  minGasLimit?: number;\n}\n\nexport const prepareBridgeTransfer = (\n  chainRef: ChainRef,\n  sender: Address,\n  params: BridgeParams\n) => {\n  if (params.token === \"eth\") {\n    return prepareStandardBridgeETHDeposit(chainRef, params);\n  }\n\n  return preparePoaBridgeDeposit(chainRef, sender, params);\n};\n\nexport const extractBridgeTransferID = async (\n  chainRef: ChainRef,\n  txHash: Hex\n) => {\n  const chain = resolveChainRef(chainRef);\n  if (!chain) throw new Error(`Chain ${chainRef} not found`);\n\n  const publicClient = getPublicClient(chainRef);\n  const receipt = await publicClient.getTransactionReceipt({ hash: txHash });\n  if (!receipt) throw new Error(`Transaction ${txHash} not found`);\n\n  if (hasPoaBridgeLogs(receipt)) {\n    if (chain.isL2)\n      return await extractPoaBridgeToL2TransferID(chainRef, txHash);\n    return await extractPoaBridgeToL1TransferID(chainRef, txHash);\n  }\n  if (hasStandardBridgeLogs(receipt))\n    return await extractStandardBridgeTransferID(chainRef, txHash);\n\n  throw new Error(\"No bridge logs found\");\n};\n"],"mappings":"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","names":["import_viem","import_viem","import_viem","import_viem","import_viem","import_chains","import_chains","import_viem","import_chains","TokenABI","TokenABI","import_viem","import_viem"]}